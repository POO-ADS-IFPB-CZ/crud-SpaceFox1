package view;

import model.Produto;
import utils.JTextFieldWithPlaceholder;

import javax.swing.*;
import java.awt.*;

public class AddEdit extends JDialog {
    private JButton salvarButton;
    private JButton cancelarButton;
    private JPanel contentPane;
    private JPanel InputPane;
    public Produto resultado;
    public boolean sucesso = false;
    private JTextFieldWithPlaceholder textFieldCodigo;
    private JTextFieldWithPlaceholder textFieldDescricao;
    private JTextFieldWithPlaceholder textFieldPreco;

    public AddEdit(boolean edit, String codigo, String descricao, Double preco) {
        sucesso = false;
        setTitle(edit ? "Editar Produto" : "Adicionar Produto");
        setModal(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(400, 150);
        setLocationRelativeTo(null);

        textFieldCodigo = new JTextFieldWithPlaceholder("Código");
        textFieldDescricao = new JTextFieldWithPlaceholder("Descrição");
        textFieldPreco = new JTextFieldWithPlaceholder("Preço");
        InputPane.setLayout(new GridLayout(1, 2, 5, 0));
        InputPane.add(textFieldCodigo);
        InputPane.add(textFieldDescricao);
        InputPane.add(textFieldPreco);

        textFieldCodigo.setText(codigo);
        textFieldDescricao.setText(descricao);
        textFieldPreco.setText(preco != null ? String.valueOf(preco) : "");
        textFieldCodigo.setEditable(!edit);

        // Ações
        cancelarButton.addActionListener(e -> dispose());
        salvarButton.addActionListener(e -> {
            String novoCodigo = textFieldCodigo.getText().trim();
            String novaDescricao = textFieldDescricao.getText().trim();
            String textoPreco = textFieldPreco.getText().trim();

            if (novoCodigo.isEmpty() || novaDescricao.isEmpty() || textoPreco.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                double novoPreco = Double.parseDouble(textoPreco);
                System.out.println("Produto salvo: " + novoCodigo + ", " + novaDescricao + ", " + novoPreco);
                resultado = new Produto(novoCodigo, novaDescricao, novoPreco);
                sucesso = true;
                dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Preço inválido.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        });

        setContentPane(contentPane);
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        InputPane = new JPanel();
        InputPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), 32, 32));
        contentPane.add(InputPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        salvarButton = new JButton();
        salvarButton.setText("Salvar");
        panel1.add(salvarButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelarButton = new JButton();
        cancelarButton.setText("Cancelar");
        panel1.add(cancelarButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
